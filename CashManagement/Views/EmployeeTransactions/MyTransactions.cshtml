@model CashManagement.Models.EmployeeTransactionsViewModel
@{
    ViewData["Title"] = "معاملاتي";
    Layout = "~/Views/Shared/_LayoutDashbord.cshtml";
}

<style>
    .stats-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 16px;
        padding: 24px;
        color: white;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .stats-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 50%);
        pointer-events: none;
    }

    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 40px rgba(102, 126, 234, 0.4);
    }

    .stats-card.success {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        box-shadow: 0 8px 32px rgba(17, 153, 142, 0.3);
    }

    .stats-card.warning {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        box-shadow: 0 8px 32px rgba(240, 147, 251, 0.3);
    }

    .stats-card.info {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        box-shadow: 0 8px 32px rgba(79, 172, 254, 0.3);
    }

    .stats-card.purple {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        color: #333;
        box-shadow: 0 8px 32px rgba(168, 237, 234, 0.3);
    }

    .stats-icon {
        font-size: 2.5rem;
        opacity: 0.8;
        margin-bottom: 16px;
    }

    .stats-value {
        font-size: 1.6rem;
        font-weight: 700;
        margin-bottom: 8px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        line-height: 1.3;
        word-spacing: 2px;
    }

    @@media (max-width: 768px) {
        .stats-value {
            font-size: 1.3rem;
            line-height: 1.4;
        }
    }

    .stats-label {
        font-size: 0.9rem;
        opacity: 0.9;
        font-weight: 500;
    }

    .period-tabs {
        background: white;
        border-radius: 12px;
        padding: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        margin-bottom: 32px;
        border: 1px solid #e5e7eb;
    }

    .period-tab {
        padding: 12px 24px;
        border: none;
        background: transparent;
        border-radius: 8px;
        font-weight: 600;
        color: #6b7280;
        cursor: pointer;
        transition: all 0.3s ease;
        margin: 0 4px;
    }

    .period-tab.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .period-tab:hover:not(.active) {
        background: #f3f4f6;
        color: #374151;
    }

    .transactions-table {
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border: 1px solid #e5e7eb;
    }

    .table-header {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 20px 24px;
        border-bottom: 1px solid #e5e7eb;
    }

    .table-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #1f2937;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .custom-table {
        width: 100%;
        margin: 0;
    }

    .custom-table th {
        background: #f8fafc;
        color: #374151;
        font-weight: 600;
        padding: 16px 24px;
        border: none;
        font-size: 0.9rem;
        text-align: right;
    }

    .custom-table td {
        padding: 16px 24px;
        border: none;
        border-bottom: 1px solid #f3f4f6;
        color: #4b5563;
        vertical-align: middle;
    }

    .custom-table tbody tr:hover {
        background: #f9fafb;
    }

    .transaction-type {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-align: center;
        min-width: 80px;
        display: inline-block;
    }

    .transaction-type.deposit {
        background: linear-gradient(135deg, #d1fae5, #a7f3d0);
        color: #065f46;
    }

    .transaction-type.withdraw {
        background: linear-gradient(135deg, #fee2e2, #fecaca);
        color: #991b1b;
    }

    .transaction-type.credit {
        background: linear-gradient(135deg, #dbeafe, #bfdbfe);
        color: #1e40af;
    }

    .transaction-type.debit {
        background: linear-gradient(135deg, #fef3c7, #fde68a);
        color: #92400e;
    }

    .amount-positive {
        color: #059669;
        font-weight: 600;
    }

    .amount-negative {
        color: #dc2626;
        font-weight: 600;
    }

    .welcome-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 32px;
        border-radius: 16px;
        margin-bottom: 32px;
        text-align: center;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
    }

    .welcome-title {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 8px;
    }

    .welcome-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 24px;
        margin-bottom: 32px;
    }

    .period-content {
        display: none;
    }

    .period-content.active {
        display: block;
    }

    @@media (max-width: 768px) {
        .stats-grid {
            grid-template-columns: 1fr;
            gap: 16px;
        }
        
        .period-tabs {
            padding: 4px;
        }
        
        .period-tab {
            padding: 8px 16px;
            font-size: 0.9rem;
        }
        
        .custom-table th,
        .custom-table td {
            padding: 12px 16px;
            font-size: 0.85rem;
        }
    }
</style>

<div class="welcome-header">
    <div class="welcome-title">
        <i class="fas fa-chart-line me-3"></i>
        مرحباً @Model.UserName
    </div>
    <div class="welcome-subtitle">
        تقرير شامل لجميع معاملاتك المالية
    </div>
</div>

<!-- تبويبات الفترات الزمنية -->
<div class="period-tabs text-center">
    <button class="period-tab active" onclick="showPeriod('today')">
        <i class="fas fa-calendar-day me-2"></i>اليوم
    </button>
    <button class="period-tab" onclick="showPeriod('monthly')">
        <i class="fas fa-calendar-alt me-2"></i>هذا الشهر
    </button>
    <button class="period-tab" onclick="showPeriod('yearly')">
        <i class="fas fa-calendar me-2"></i>هذا العام
    </button>
</div>

<!-- إحصائيات اليوم -->
<div id="today-content" class="period-content active">
    <div class="stats-grid">
        <div class="stats-card success">
            <div class="stats-icon">
                <i class="fas fa-arrow-up"></i>
            </div>
            <div class="stats-value">@Model.TodayTotalDeposits.ToString("N0") جنيه مصري</div>
            <div class="stats-label">إجمالي الإيداعات اليوم</div>
        </div>
        
        <div class="stats-card warning">
            <div class="stats-icon">
                <i class="fas fa-arrow-down"></i>
            </div>
            <div class="stats-value">@Model.TodayTotalWithdrawals.ToString("N0") جنيه مصري</div>
            <div class="stats-label">إجمالي السحوبات اليوم</div>
        </div>
        
        <div class="stats-card info">
            <div class="stats-icon">
                <i class="fas fa-balance-scale"></i>
            </div>
            <div class="stats-value">@((Model.TodayTotalDeposits - Model.TodayTotalWithdrawals).ToString("N0")) جنيه مصري</div>
            <div class="stats-label">صافي المعاملات اليوم</div>
        </div>
        
        <div class="stats-card purple">
            <div class="stats-icon">
                <i class="fas fa-exchange-alt"></i>
            </div>
            <div class="stats-value">@((Model.RecentPhysicalTransactions.Count(t => t.CreatedAt.Date == DateTime.Today) + 
                                      Model.RecentCashTransactions.Count(t => t.CreatedAt.Date == DateTime.Today) + 
                                      Model.RecentInstaPayTransactions.Count(t => t.CreatedAt.Date == DateTime.Today) + 
                                      Model.RecentSupplierTransactions.Count(t => t.TransactionDate.Date == DateTime.Today)).ToString()) معاملة</div>
            <div class="stats-label">عدد المعاملات اليوم</div>
        </div>
    </div>
</div>

<!-- إحصائيات الشهر -->
<div id="monthly-content" class="period-content">
    <div class="stats-grid">
        <div class="stats-card success">
            <div class="stats-icon">
                <i class="fas fa-arrow-up"></i>
            </div>
            <div class="stats-value">@Model.MonthlyTotalDeposits.ToString("N0") جنيه مصري</div>
            <div class="stats-label">إجمالي الإيداعات هذا الشهر</div>
        </div>
        
        <div class="stats-card warning">
            <div class="stats-icon">
                <i class="fas fa-arrow-down"></i>
            </div>
            <div class="stats-value">@Model.MonthlyTotalWithdrawals.ToString("N0") جنيه مصري</div>
            <div class="stats-label">إجمالي السحوبات هذا الشهر</div>
        </div>
        
        <div class="stats-card info">
            <div class="stats-icon">
                <i class="fas fa-balance-scale"></i>
            </div>
            <div class="stats-value">@((Model.MonthlyTotalDeposits - Model.MonthlyTotalWithdrawals).ToString("N0")) جنيه مصري</div>
            <div class="stats-label">صافي المعاملات هذا الشهر</div>
        </div>
        
        <div class="stats-card purple">
            <div class="stats-icon">
                <i class="fas fa-chart-bar"></i>
            </div>
            <div class="stats-value">@((Model.MonthlyTotalDeposits + Model.MonthlyTotalWithdrawals).ToString("N0")) جنيه مصري</div>
            <div class="stats-label">إجمالي حجم المعاملات</div>
        </div>
    </div>
</div>

<!-- إحصائيات السنة -->
<div id="yearly-content" class="period-content">
    <div class="stats-grid">
        <div class="stats-card success">
            <div class="stats-icon">
                <i class="fas fa-arrow-up"></i>
            </div>
            <div class="stats-value">@Model.YearlyTotalDeposits.ToString("N0") جنيه مصري</div>
            <div class="stats-label">إجمالي الإيداعات هذا العام</div>
        </div>
        
        <div class="stats-card warning">
            <div class="stats-icon">
                <i class="fas fa-arrow-down"></i>
            </div>
            <div class="stats-value">@Model.YearlyTotalWithdrawals.ToString("N0") جنيه مصري</div>
            <div class="stats-label">إجمالي السحوبات هذا العام</div>
        </div>
        
        <div class="stats-card info">
            <div class="stats-icon">
                <i class="fas fa-balance-scale"></i>
            </div>
            <div class="stats-value">@((Model.YearlyTotalDeposits - Model.YearlyTotalWithdrawals).ToString("N0")) جنيه مصري</div>
            <div class="stats-label">صافي المعاملات هذا العام</div>
        </div>
        
        <div class="stats-card purple">
            <div class="stats-icon">
                <i class="fas fa-trophy"></i>
            </div>
            <div class="stats-value">@((Model.YearlyTotalDeposits + Model.YearlyTotalWithdrawals).ToString("N0")) جنيه مصري</div>
            <div class="stats-label">إجمالي حجم المعاملات</div>
        </div>
    </div>
</div>

<!-- آخر المعاملات -->
<div class="row mt-5">
    @if (Model.RecentPhysicalTransactions.Any())
    {
        <div class="col-lg-6 mb-4">
            <div class="transactions-table">
                <div class="table-header">
                    <h5 class="table-title">
                        <i class="fas fa-money-bill-wave text-success"></i>
                        آخر معاملات النقد الفعلي
                    </h5>
                </div>
                <table class="custom-table">
                    <thead>
                        <tr>
                            <th>النوع</th>
                            <th>المبلغ</th>
                            <th>التاريخ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.RecentPhysicalTransactions.Take(5))
                        {
                            <tr>
                                <td>
                                    <span class="transaction-type @(transaction.TransactionType == TransactionType.Deposit ? "deposit" : "withdraw")">
                                        @(transaction.TransactionType == TransactionType.Deposit ? "إيداع" : "سحب")
                                    </span>
                                </td>
                                <td class="@(transaction.TransactionType == TransactionType.Deposit ? "amount-positive" : "amount-negative")">
                                    @transaction.Amount.ToString("N2") ج.م
                                </td>
                                <td>@transaction.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    @if (Model.RecentCashTransactions.Any())
    {
        <div class="col-lg-6 mb-4">
            <div class="transactions-table">
                <div class="table-header">
                    <h5 class="table-title">
                        <i class="fas fa-credit-card text-primary"></i>
                        آخر معاملات الخطوط النقدية
                    </h5>
                </div>
                <table class="custom-table">
                    <thead>
                        <tr>
                            <th>النوع</th>
                            <th>المبلغ</th>
                            <th>الخط</th>
                            <th>التاريخ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.RecentCashTransactions.Take(5))
                        {
                            <tr>
                                <td>
                                    <span class="transaction-type @(transaction.TransactionType == TransactionType.Deposit ? "deposit" : "withdraw")">
                                        @(transaction.TransactionType == TransactionType.Deposit ? "إيداع" : "سحب")
                                    </span>
                                </td>
                                <td class="@(transaction.TransactionType == TransactionType.Deposit ? "amount-positive" : "amount-negative")">
                                    @transaction.Amount.ToString("N2") ج.م
                                </td>
                                <td>@transaction.CashLine?.PhoneNumber</td>
                                <td>@transaction.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<div class="row">
    @if (Model.RecentInstaPayTransactions.Any())
    {
        <div class="col-lg-6 mb-4">
            <div class="transactions-table">
                <div class="table-header">
                    <h5 class="table-title">
                        <i class="fas fa-mobile-alt text-purple"></i>
                        آخر معاملات InstaPay
                    </h5>
                </div>
                <table class="custom-table">
                    <thead>
                        <tr>
                            <th>النوع</th>
                            <th>المبلغ</th>
                            <th>الرقم</th>
                            <th>التاريخ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.RecentInstaPayTransactions.Take(5))
                        {
                            <tr>
                                <td>
                                    <span class="transaction-type @(transaction.TransactionType == TransactionType.Deposit ? "deposit" : "withdraw")">
                                        @(transaction.TransactionType == TransactionType.Deposit ? "إيداع" : "سحب")
                                    </span>
                                </td>
                                <td class="@(transaction.TransactionType == TransactionType.Deposit ? "amount-positive" : "amount-negative")">
                                    @transaction.Amount.ToString("N2") ج.م
                                </td>
                                <td>@transaction.InstaPay?.PhoneNumber</td>
                                <td>@transaction.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    @if (Model.RecentSupplierTransactions.Any())
    {
        <div class="col-lg-6 mb-4">
            <div class="transactions-table">
                <div class="table-header">
                    <h5 class="table-title">
                        <i class="fas fa-handshake text-warning"></i>
                        آخر معاملات الموردين
                    </h5>
                </div>
                <table class="custom-table">
                    <thead>
                        <tr>
                            <th>النوع</th>
                            <th>المبلغ</th>
                            <th>المورد</th>
                            <th>التاريخ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.RecentSupplierTransactions.Take(5))
                        {
                            <tr>
                                <td>
                                    <span class="transaction-type @(transaction.DebitCreditType == DebitCreditType.Credit ? "credit" : "debit")">
                                        @(transaction.DebitCreditType == DebitCreditType.Credit ? "دائن" : "مدين")
                                    </span>
                                </td>
                                <td class="@(transaction.DebitCreditType == DebitCreditType.Credit ? "amount-positive" : "amount-negative")">
                                    @transaction.Amount.ToString("N2") ج.م
                                </td>
                                <td>@transaction.Supplier?.Name</td>
                                <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<script>
    function showPeriod(period) {
        // إخفاء جميع المحتويات
        document.querySelectorAll('.period-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // إزالة الفئة النشطة من جميع التبويبات
        document.querySelectorAll('.period-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // إظهار المحتوى المحدد
        document.getElementById(period + '-content').classList.add('active');
        
        // تفعيل التبويب المحدد
        event.target.classList.add('active');
    }

    // تأثيرات تفاعلية
    document.addEventListener('DOMContentLoaded', function() {
        // تأثير الظهور التدريجي للكروت
        const cards = document.querySelectorAll('.stats-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
                card.style.transition = 'all 0.6s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    });
</script>

